/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sr5CampaignManager.dialogs;

import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import sr5CampaignManager.models.MapDrawingObjectListModel;
import sr5CampaignManager.models.MapDrawingObjectRenderer;
import sr5CampaignManager.objects.*;
import sr5CampaignManager.objects.maps.MapDrawingObject;
import sr5CampaignManager.events.MapChangeEvent;
import sr5CampaignManager.events.MapChangeListener;

/**
 *
 * @author nbp184
 */
public class MapObjectsDialog extends javax.swing.JDialog {

    private final Map map;
    private final MapDrawingObjectListModel model;
    private MapDrawingObjectPanel panel;
    private final MapChangeListener myListener;
    private MapChangeListener listener;
    
    /**
     * Creates new form MapObjectsDialog
     */
    public MapObjectsDialog(java.awt.Frame parent, Map map) {
        super(parent, true);
        initComponents();
        this.map = map;
        myListener = new MapChangeListener() {
            @Override
            public void mapChanged(MapChangeEvent evt) {
                myMapChanged(evt);
            }
        };
        listener = null;
        model = new MapDrawingObjectListModel(map);
        lstObjects.setModel(model);
        lstObjects.setCellRenderer(new MapDrawingObjectRenderer());
        lstObjects.addListSelectionListener(new ListSelectionListener() {
            @Override
            public void valueChanged(ListSelectionEvent e) {
                lstObjectsValueChanged(e);
            }
        });
        
        panel = new MapLinePanel(map);
        panel.addMapChangeListener(myListener);
        spObject.setViewportView(panel);
    }
    
    public void showDialog() {
        this.setLocationRelativeTo(getParent());
        this.setVisible(true);
    }
    
    public void setMapChangeListener(MapChangeListener listener) {
        this.listener = listener;
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        lstObjects = new javax.swing.JList();
        spObject = new javax.swing.JScrollPane();
        btnOK = new javax.swing.JButton();
        cbObjectType = new javax.swing.JComboBox();
        jLabel1 = new javax.swing.JLabel();

        setTitle("Edit Map Objects");

        lstObjects.setModel(new javax.swing.AbstractListModel() {
            String[] strings = { "Item 1", "Item 2", "Item 3", "Item 4", "Item 5" };
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        lstObjects.setSelectionMode(javax.swing.ListSelectionModel.SINGLE_SELECTION);
        jScrollPane1.setViewportView(lstObjects);

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        cbObjectType.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Line", "Box", "Oval", "Text", "Security" }));
        cbObjectType.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbObjectTypeActionPerformed(evt);
            }
        });

        jLabel1.setText("Object Type");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 281, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spObject)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGap(0, 0, Short.MAX_VALUE)
                        .addComponent(btnOK))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbObjectType, 0, 265, Short.MAX_VALUE)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(cbObjectType, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel1))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(spObject, javax.swing.GroupLayout.PREFERRED_SIZE, 391, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(18, 18, 18)
                        .addComponent(btnOK)
                        .addGap(0, 16, Short.MAX_VALUE))
                    .addComponent(jScrollPane1))
                .addContainerGap())
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void cbObjectTypeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbObjectTypeActionPerformed
        switch((String)cbObjectType.getSelectedItem()) {
            case "Line":
                panel = new MapLinePanel(map);
                break;
            case "Box":
                panel = new MapBoxPanel(map);
                break;
            case "Oval":
                panel = new MapOvalPanel(map);
                break;
            case "Security":
                panel = new MapSecurityPanel(map);
                break;
            case "Text":
                panel = new MapTextPanel(map);
                break;
        }
        panel.addMapChangeListener(myListener);
        spObject.setViewportView(panel);
    }//GEN-LAST:event_cbObjectTypeActionPerformed

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_btnOKActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnOK;
    private javax.swing.JComboBox cbObjectType;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JList lstObjects;
    private javax.swing.JScrollPane spObject;
    // End of variables declaration//GEN-END:variables

    private void myMapChanged(MapChangeEvent evt) {
        switch(evt.getType()) {
            case MapChangeEvent.ADD:
                model.add(evt.getObject());
                panel.clearData();
                break;
            case MapChangeEvent.REMOVE:
                model.remove(evt.getObject());
                lstObjects.clearSelection();
                break;
            case MapChangeEvent.UPDATE:
                if(evt.getObject() != null) {
                    model.update(evt.getObject());
                    lstObjects.clearSelection();
                }
                break;
            case MapChangeEvent.CANCEL:
                if(evt.getObject() != null) {
                    lstObjects.clearSelection();
                }
                break;
        }
        listener.mapChanged(evt);
    }
    
    private void lstObjectsValueChanged(ListSelectionEvent e) {
        Object selected = lstObjects.getSelectedValue();
        if(selected != null) {
            if(!panel.isOfType(selected.getClass().getSimpleName())) {
                switch(selected.getClass().getSimpleName()) {
                    case "MapLine":
                        cbObjectType.setSelectedItem("Line");
                        break;
                    case "MapBox":
                        cbObjectType.setSelectedItem("Box");
                        break;
                    case "MapOval":
                        cbObjectType.setSelectedItem("Oval");
                        break;
                    case "MapSecurity":
                        cbObjectType.setSelectedItem("Security");
                        break;
                    case "MapText":
                        cbObjectType.setSelectedItem("Text");
                        break;
                }
            }
            cbObjectType.setEnabled(false);
            panel.setObject((MapDrawingObject)selected);
        } else {
            cbObjectType.setEnabled(true);
            if(!panel.isOfType("Map" +cbObjectType.getSelectedItem())) {
                switch((String)cbObjectType.getSelectedItem()) {
                    case "Line":
                        panel = new MapLinePanel(map);
                        break;
                    case "Box":
                        panel = new MapBoxPanel(map);
                        break;
                    case "Oval":
                        panel = new MapOvalPanel(map);
                        break;
                    case "Security":
                        panel = new MapSecurityPanel(map);
                        break;
                    case "Text":
                        panel = new MapTextPanel(map);
                        break;
                }
                panel.addMapChangeListener(myListener);
                spObject.setViewportView(panel);
            } else {
                panel.clearData();
            }
        }
    }
}
