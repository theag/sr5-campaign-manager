/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sr5CampaignManager;

import sr5CampaignManager.events.RunChangeEvent;
import sr5CampaignManager.events.RunChangeListener;
import sr5CampaignManager.events.OpenPanelListener;
import java.awt.GraphicsDevice;
import java.awt.GraphicsEnvironment;
import myutil.Preferences;
import java.awt.event.MouseEvent;
import java.io.File;
import java.io.IOException;
import javax.swing.JFileChooser;
import javax.swing.JOptionPane;
import javax.swing.tree.DefaultMutableTreeNode;
import javax.swing.tree.DefaultTreeModel;
import javax.swing.tree.TreePath;
import myutil.MyFileChooser;
import sr5CampaignManager.dialogs.ExportDialog;
import sr5CampaignManager.dialogs.StringTreeEditDialog;
import sr5CampaignManager.dialogs.WeaponEditDialog;
import sr5CampaignManager.objects.*;
import sr5CampaignManager.panels.*;

/**
 *
 * @author nbp184
 */
public class MainFrame extends javax.swing.JFrame {

    private Run run;
    private RunEditor currentPanel;
    private StringTreeEditDialog augEditDialog;
    private WeaponEditDialog wed;
    private StringTreeEditDialog gearEditDialog;
    private DefaultTreeModel treeModel;
    private MyFileChooser fileChooser;
    private JFileChooser exportFileChooser;
    
    /**
     * Creates new form MainFrame
     */
    public MainFrame() {
        initComponents();
        
        Preferences.load("Campaign Manager");
        
        fileChooser = new MyFileChooser("SR5 Run File", "run");
        exportFileChooser = new JFileChooser();
        if(Preferences.hasPreference("FileDir")) {
            fileChooser.setCurrentDirectory(new File(Preferences.getStringPreference("FileDir")));
        }
        if(Preferences.hasPreference("ExportDir")) {
            exportFileChooser.setCurrentDirectory(new File(Preferences.getStringPreference("ExportDir")));
        }
        fileChooser.setAcceptAllFileFilterUsed(false);
        exportFileChooser.setAcceptAllFileFilterUsed(false);
        exportFileChooser.setFileSelectionMode(JFileChooser.DIRECTORIES_ONLY);
        
        Resources r = Resources.get();
        augEditDialog = new StringTreeEditDialog(this, true, r.getAugs(), "Augmentation");
        wed = new WeaponEditDialog(this, true);
        gearEditDialog = new StringTreeEditDialog(this, true, r.getGear(), "Gear");

        Object val = Preferences.getPreference("NoAdd");
        if(val != null) {
            miDontAddStuff.setSelected((Boolean)val);
        } else {
            Preferences.setPreference("NoAdd", miDontAddStuff.isSelected());
        }
        
        run = new Run("Untitled");
        treeModel = new DefaultTreeModel(run.root, true);
        treMain.setModel(treeModel);
        updateCurrentPanel(new RunPanel(run));
        setExtendedState(javax.swing.JFrame.MAXIMIZED_BOTH);
        spMain.setDividerLocation(Preferences.getIntegerPreference("MainDivider", 168));
        
        GraphicsEnvironment ge = GraphicsEnvironment.getLocalGraphicsEnvironment();
        GraphicsDevice[] gd = ge.getScreenDevices();
        setLocation(gd[0].getDefaultConfiguration().getBounds().x, getY());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        spMain = new javax.swing.JSplitPane();
        jScrollPane1 = new javax.swing.JScrollPane();
        treMain = new javax.swing.JTree();
        mbMain = new javax.swing.JMenuBar();
        jMenu1 = new javax.swing.JMenu();
        miNewRun = new javax.swing.JMenuItem();
        miNewNPCGroup = new javax.swing.JMenuItem();
        miNewMap = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JPopupMenu.Separator();
        miOpenRun = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JPopupMenu.Separator();
        miSaveRun = new javax.swing.JMenuItem();
        jSeparator4 = new javax.swing.JPopupMenu.Separator();
        miExportSite = new javax.swing.JMenuItem();
        mEdit = new javax.swing.JMenu();
        miOrgAug = new javax.swing.JMenuItem();
        miOrgWeap = new javax.swing.JMenuItem();
        miOrgGear = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JPopupMenu.Separator();
        miDontAddStuff = new javax.swing.JCheckBoxMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("SR5 Campaign Mananger");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        spMain.setDividerLocation(168);

        treMain.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                treMainMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(treMain);

        spMain.setLeftComponent(jScrollPane1);

        jMenu1.setText("File");

        miNewRun.setText("New Run");
        miNewRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewRunActionPerformed(evt);
            }
        });
        jMenu1.add(miNewRun);

        miNewNPCGroup.setText("New NPC Group");
        miNewNPCGroup.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewNPCGroupActionPerformed(evt);
            }
        });
        jMenu1.add(miNewNPCGroup);

        miNewMap.setText("New Map");
        miNewMap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miNewMapActionPerformed(evt);
            }
        });
        jMenu1.add(miNewMap);
        jMenu1.add(jSeparator2);

        miOpenRun.setText("Open Run");
        miOpenRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOpenRunActionPerformed(evt);
            }
        });
        jMenu1.add(miOpenRun);
        jMenu1.add(jSeparator3);

        miSaveRun.setText("Save Run");
        miSaveRun.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miSaveRunActionPerformed(evt);
            }
        });
        jMenu1.add(miSaveRun);
        jMenu1.add(jSeparator4);

        miExportSite.setText("Export as Site");
        miExportSite.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miExportSiteActionPerformed(evt);
            }
        });
        jMenu1.add(miExportSite);

        mbMain.add(jMenu1);

        mEdit.setText("Edit");

        miOrgAug.setText("Organize Augmentations");
        miOrgAug.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOrgAugActionPerformed(evt);
            }
        });
        mEdit.add(miOrgAug);

        miOrgWeap.setText("Organize Weapons");
        miOrgWeap.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOrgWeapActionPerformed(evt);
            }
        });
        mEdit.add(miOrgWeap);

        miOrgGear.setText("Organize Gear");
        miOrgGear.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miOrgGearActionPerformed(evt);
            }
        });
        mEdit.add(miOrgGear);
        mEdit.add(jSeparator1);

        miDontAddStuff.setText("Don't Add Stuff");
        miDontAddStuff.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                miDontAddStuffActionPerformed(evt);
            }
        });
        mEdit.add(miDontAddStuff);

        mbMain.add(mEdit);

        setJMenuBar(mbMain);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spMain, javax.swing.GroupLayout.DEFAULT_SIZE, 1125, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(spMain, javax.swing.GroupLayout.DEFAULT_SIZE, 643, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void miNewRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewRunActionPerformed
        fileChooser.clearSelected();
        run = new Run("Untitled");
        treeModel = new DefaultTreeModel(run.root, true);
        treMain.setModel(treeModel);
        updateCurrentPanel(new RunPanel(run));
    }//GEN-LAST:event_miNewRunActionPerformed

    private void miNewNPCGroupActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewNPCGroupActionPerformed
        NPCGroup npcGroup = new NPCGroup("Untitled");
        run.objects.add(npcGroup);
        //treMain.setModel(new DefaultTreeModel(run.getRoot(), true));
        treeModel.insertNodeInto(npcGroup.getNode(), run.getNPCGroupNode(), run.getNPCGroupCount());
        treMain.setSelectionPath(new TreePath(npcGroup.getNode().getPath()));
        updateCurrentPanel(new NPCGroupPanel(npcGroup));
        currentPanel.addOpenPanelListener(new OpenPanelListener() {

            @Override
            public void onOpenPanel(RunEditor panel) {
                onThisOpenPanel(panel);
            }
        });
    }//GEN-LAST:event_miNewNPCGroupActionPerformed

    private void miOrgAugActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOrgAugActionPerformed
        augEditDialog.showDialog();
    }//GEN-LAST:event_miOrgAugActionPerformed

    private void miOrgWeapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOrgWeapActionPerformed
        wed.showDialog();
    }//GEN-LAST:event_miOrgWeapActionPerformed

    private void miOrgGearActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOrgGearActionPerformed
        gearEditDialog.showDialog();
    }//GEN-LAST:event_miOrgGearActionPerformed

    private void miDontAddStuffActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miDontAddStuffActionPerformed
        Preferences.setPreference("NoAdd", miDontAddStuff.isSelected());
    }//GEN-LAST:event_miDontAddStuffActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        currentPanel.preferenceSave();
        Resources.save();
        Preferences.setPreference("MainDivider", spMain.getDividerLocation());
        Preferences.setPreference("FileDir", fileChooser.getCurrentDirectory().getAbsolutePath());
        Preferences.setPreference("ExportDir", exportFileChooser.getCurrentDirectory().getAbsolutePath());
        Preferences.save("Campaign Manager");
    }//GEN-LAST:event_formWindowClosing

    private void treMainMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_treMainMouseClicked
        if(evt.getClickCount() == 2 && evt.getButton() == MouseEvent.BUTTON1) {
            DefaultMutableTreeNode node = (DefaultMutableTreeNode)treMain.getSelectionPath().getLastPathComponent();
            Object userObject = node.getUserObject();
            if(userObject instanceof Run) {
                updateCurrentPanel(new RunPanel(run));
            } else if(userObject instanceof NPCGroup) {
                updateCurrentPanel(new NPCGroupPanel((NPCGroup)userObject));
            } else if(userObject instanceof NPC) {
                updateCurrentPanel(new NPCPanel((NPC)userObject));
            } else if(userObject instanceof Map) {
                updateCurrentPanel(new MapPanel((Map)userObject));
            }
        }
    }//GEN-LAST:event_treMainMouseClicked

    private void miSaveRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miSaveRunActionPerformed
        currentPanel.clickSaveButton();
        int result = fileChooser.showSaveDialog(this);
        if(result == MyFileChooser.APPROVE_OPTION) {
            try {
                run.save(fileChooser.getSelectedFile());
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error", "Saving", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace(System.out);
            }
        }
    }//GEN-LAST:event_miSaveRunActionPerformed

    private void miOpenRunActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miOpenRunActionPerformed
        int result = fileChooser.showOpenDialog(this);
        if(result == MyFileChooser.APPROVE_OPTION) {
            try {
                run = Run.load(fileChooser.getSelectedFile());
                fileChooser.clearSelected();
                treeModel = new DefaultTreeModel(run.root, true);
                treMain.setModel(treeModel);
                updateCurrentPanel(new RunPanel(run));
            } catch (IOException ex) {
                JOptionPane.showMessageDialog(this, "Error", "Saving", JOptionPane.ERROR_MESSAGE);
                ex.printStackTrace(System.out);
            }
        }
    }//GEN-LAST:event_miOpenRunActionPerformed

    private void miNewMapActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miNewMapActionPerformed
        Map map = new Map("Untitled");
        run.objects.add(map);
        //treMain.setModel(new DefaultTreeModel(run.getRoot(), true));
        treeModel.insertNodeInto(map.getNode(), run.getMapNode(), run.getMapCount());
        treMain.setSelectionPath(new TreePath(map.getNode().getPath()));
        updateCurrentPanel(new MapPanel(map));
    }//GEN-LAST:event_miNewMapActionPerformed

    private void miExportSiteActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_miExportSiteActionPerformed
        int result = exportFileChooser.showSaveDialog(this);
        if(result == JFileChooser.APPROVE_OPTION) {
            ExportDialog dialog = new ExportDialog(this, run, ExportDialog.SITE, exportFileChooser.getSelectedFile());
            dialog.setVisible(true);
        }
    }//GEN-LAST:event_miExportSiteActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MainFrame.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                new MainFrame().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu jMenu1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPopupMenu.Separator jSeparator1;
    private javax.swing.JPopupMenu.Separator jSeparator2;
    private javax.swing.JPopupMenu.Separator jSeparator3;
    private javax.swing.JPopupMenu.Separator jSeparator4;
    private javax.swing.JMenu mEdit;
    private javax.swing.JMenuBar mbMain;
    private javax.swing.JCheckBoxMenuItem miDontAddStuff;
    private javax.swing.JMenuItem miExportSite;
    private javax.swing.JMenuItem miNewMap;
    private javax.swing.JMenuItem miNewNPCGroup;
    private javax.swing.JMenuItem miNewRun;
    private javax.swing.JMenuItem miOpenRun;
    private javax.swing.JMenuItem miOrgAug;
    private javax.swing.JMenuItem miOrgGear;
    private javax.swing.JMenuItem miOrgWeap;
    private javax.swing.JMenuItem miSaveRun;
    private javax.swing.JSplitPane spMain;
    private javax.swing.JTree treMain;
    // End of variables declaration//GEN-END:variables

    private void onCurrentRunChanged(RunChangeEvent evt) {
        setTitle(currentPanel.getTitleBar() +" - SR5 Campaign Manager");
        if(evt.isAddRemove()) {
            //treMain.setModel(new DefaultTreeModel(run.root, true));
            if(evt.getAddRemove() == RunChangeEvent.ADD) {
                switch(evt.getType()) {
                    case RunChangeEvent.NPC:
                        treeModel.insertNodeInto(evt.getSource().getNode(), evt.getParent().getNode(), ((NPCGroup)evt.getParent()).npcs.size()-1);
                        treMain.setSelectionPath(new TreePath(evt.getSource().getNode().getPath()));
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Bad source type: " +evt.getSource().getClass().getName(), "Adding", JOptionPane.ERROR_MESSAGE);
                }                
            } else {
                switch(evt.getType()) {
                    case RunChangeEvent.NPC:
                        treeModel.removeNodeFromParent(evt.getSource().getNode());
                        break;
                    default:
                        JOptionPane.showMessageDialog(this, "Bad source type: " +evt.getSource().getClass().getName(), "Removing", JOptionPane.ERROR_MESSAGE);
                }
            }
        } else {
            treMain.repaint();
        }
    }

    private void onThisOpenPanel(RunEditor panel) {
        updateCurrentPanel(panel);
    }

    private void updateCurrentPanel(RunEditor panel) {
        if(currentPanel != null) {
            currentPanel.preferenceSave();
        }
        currentPanel = panel;
        currentPanel.addRunChangeListener(new RunChangeListener() {

            @Override
            public void onRunChanged(RunChangeEvent evt) {
                onCurrentRunChanged(evt);
            }
        });
        int dividerLoc = spMain.getDividerLocation();
        spMain.setRightComponent(currentPanel);
        spMain.setDividerLocation(dividerLoc);
        setTitle(currentPanel.getTitleBar() +" - SR5 Campaign Manager");
    }
}
