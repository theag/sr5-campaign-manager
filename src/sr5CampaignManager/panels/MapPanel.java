/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package sr5CampaignManager.panels;

import sr5CampaignManager.events.RunChangeEvent;
import sr5CampaignManager.events.RunChangeListener;
import sr5CampaignManager.events.MapChangeListener;
import sr5CampaignManager.events.DrawingModeChangeListener;
import sr5CampaignManager.events.MapChangeEvent;
import sr5CampaignManager.models.MyComboBoxCellRenderer;
import sr5CampaignManager.models.NamedColourComboBoxModel;
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Point;
import java.awt.event.ItemEvent;
import java.awt.event.ItemListener;
import javax.swing.DefaultComboBoxModel;
import javax.swing.JColorChooser;
import javax.swing.JOptionPane;
import javax.swing.SpinnerNumberModel;
import javax.swing.event.ChangeEvent;
import javax.swing.event.ChangeListener;
import javax.swing.plaf.basic.BasicToolBarUI;
import myutil.Preferences;
import sr5CampaignManager.models.LineWidthComboBoxModel;
import sr5CampaignManager.dialogs.EditNamedColoursDialog;
import sr5CampaignManager.dialogs.MapObjectsDialog;
import sr5CampaignManager.dialogs.NumberSelectorDialog;
import sr5CampaignManager.objects.Map;
import sr5CampaignManager.objects.maps.*;

/**
 *
 * @author nbp184
 */
public class MapPanel extends RunEditor {

    private static final Color dockingColour = new Color(173, 214, 255);
    
    private Map map;
    private MapDrawingPanel mdp;
    private boolean firstMove;
    
    /**
     * Creates new form MapPanel
     */
    public MapPanel(Map map) {
        initComponents();
        this.map = map;
        txtName.setText(map.name);
        spnWidth.setModel(new SpinnerNumberModel(map.width, 1, 1000, 1));
        spnHeight.setModel(new SpinnerNumberModel(map.height, 1, 1000, 1));
        spnBoxSize.setModel(new SpinnerNumberModel(map.boxSize, 1, 500, 1));
        
        cbColour.setModel(new NamedColourComboBoxModel(map, true));
        cbColour.setRenderer(new MyComboBoxCellRenderer(MyComboBoxCellRenderer.NAMED_COLOUR));
        
        cbLineWidth.setModel(new LineWidthComboBoxModel());
        cbLineWidth.setRenderer(new MyComboBoxCellRenderer(MyComboBoxCellRenderer.LINE_WIDTH));
        cbLineWidth.addItemListener(new ItemListener() {
            @Override
            public void itemStateChanged(ItemEvent e) {
                if(e.getStateChange() == ItemEvent.SELECTED) {
                    cbLineWidthItemSelected();
                }
            }
        });
        
        spnFontSize.setValue(12);  
        
        spnFontSize.addChangeListener(new ChangeListener() {
            @Override
            public void stateChanged(ChangeEvent e) {
                spnFontSizeStateChanged(e);
            }
        });
        
        mdp = new MapDrawingPanel(map);
        mdp.addDrawingModeChangeListener(new DrawingModeChangeListener() {

            @Override
            public void drawingModeChanged(int newMode) {
                mdpDrawingModeChanged(newMode);
            }
        });
        spImageHolder.setViewportView(mdp);
        this.remove(pnlMain);
        this.setLayout(new BorderLayout());
        this.add(pnlMain, BorderLayout.CENTER);
        
        tbDrawingOptions.setOrientation(Preferences.getIntegerPreference("MapOptionsToolbarOrientation", javax.swing.JToolBar.HORIZONTAL));
        this.add(tbDrawingOptions, Preferences.getStringPreference("MapOptionsToolbarConstraints", BorderLayout.PAGE_START));
        BasicToolBarUI ui1 = (BasicToolBarUI)tbDrawingOptions.getUI();
        ui1.setDockingColor(dockingColour);
        
        tbDrawingObjects.setOrientation(Preferences.getIntegerPreference("MapObjectsToolbarOrientation", javax.swing.JToolBar.VERTICAL));
        this.add(tbDrawingObjects, Preferences.getStringPreference("MapObjectsToolbarConstraints", BorderLayout.WEST));
        ui1 = (BasicToolBarUI)tbDrawingObjects.getUI();
        ui1.setDockingColor(dockingColour);
        
        firstMove = true;
        
        rbDetection.doClick();
        
        if(!Preferences.getBooleanPreference("MapObjectsToolbarTextOptionsVisible", true)) {
            btnShrinkTextOptions.doClick();
        }
        if(!Preferences.getBooleanPreference("MapObjectsToolbarSecurityOptionsVisible", false)) {
            btnShrinkSecurityOptions.doClick();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbDrawingOptions = new javax.swing.JToolBar();
        jLabel5 = new javax.swing.JLabel();
        cbColour = new javax.swing.JComboBox();
        btnEditColours = new javax.swing.JButton();
        jSeparator1 = new javax.swing.JToolBar.Separator();
        jLabel6 = new javax.swing.JLabel();
        cbLineWidth = new javax.swing.JComboBox();
        jSeparator3 = new javax.swing.JToolBar.Separator();
        cbFilled = new javax.swing.JCheckBox();
        jSeparator7 = new javax.swing.JToolBar.Separator();
        jLabel7 = new javax.swing.JLabel();
        pnlTextOptions = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        spnFontSize = new javax.swing.JSpinner();
        cbRotate = new javax.swing.JCheckBox();
        jLabel9 = new javax.swing.JLabel();
        cbHorizontal = new javax.swing.JComboBox();
        jLabel10 = new javax.swing.JLabel();
        cbVertical = new javax.swing.JComboBox();
        btnShrinkTextOptions = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JToolBar.Separator();
        jLabel11 = new javax.swing.JLabel();
        pnlSecurityOptions = new javax.swing.JPanel();
        rbDetection = new javax.swing.JRadioButton();
        rbLocks = new javax.swing.JRadioButton();
        jLabel12 = new javax.swing.JLabel();
        cbDevice = new javax.swing.JComboBox();
        btnShrinkSecurityOptions = new javax.swing.JButton();
        tbDrawingObjects = new javax.swing.JToolBar();
        btnAddLine = new javax.swing.JToggleButton();
        btnAddBox = new javax.swing.JToggleButton();
        btnAddOval = new javax.swing.JToggleButton();
        btnAddText = new javax.swing.JToggleButton();
        btnAddSecurity = new javax.swing.JToggleButton();
        jSeparator5 = new javax.swing.JToolBar.Separator();
        btnEditObjects = new javax.swing.JButton();
        btnGrpSecurityType = new javax.swing.ButtonGroup();
        pnlMain = new javax.swing.JPanel();
        spnWidth = new javax.swing.JSpinner();
        jLabel3 = new javax.swing.JLabel();
        btnSave = new javax.swing.JButton();
        spnHeight = new javax.swing.JSpinner();
        btnUpdateSize = new javax.swing.JButton();
        spImageHolder = new javax.swing.JScrollPane();
        btnResetSize = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        spnBoxSize = new javax.swing.JSpinner();
        jLabel1 = new javax.swing.JLabel();
        txtName = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();

        tbDrawingOptions.setRollover(true);
        tbDrawingOptions.setMargin(new java.awt.Insets(2, 2, 2, 2));

        jLabel5.setText("Colour");
        tbDrawingOptions.add(jLabel5);

        cbColour.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbColour.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbColourActionPerformed(evt);
            }
        });
        tbDrawingOptions.add(cbColour);

        btnEditColours.setText("Edit");
        btnEditColours.setFocusable(false);
        btnEditColours.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditColours.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditColours.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditColoursActionPerformed(evt);
            }
        });
        tbDrawingOptions.add(btnEditColours);
        tbDrawingOptions.add(jSeparator1);

        jLabel6.setText("Line Width");
        tbDrawingOptions.add(jLabel6);

        cbLineWidth.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        tbDrawingOptions.add(cbLineWidth);
        tbDrawingOptions.add(jSeparator3);

        cbFilled.setText("Filled");
        cbFilled.setFocusable(false);
        cbFilled.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cbFilled.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbFilledActionPerformed(evt);
            }
        });
        tbDrawingOptions.add(cbFilled);
        tbDrawingOptions.add(jSeparator7);

        jLabel7.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel7.setText("Text Options: ");
        tbDrawingOptions.add(jLabel7);

        jLabel8.setText("Font Size");

        cbRotate.setText("Rotate  ");
        cbRotate.setFocusable(false);
        cbRotate.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        cbRotate.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbRotateActionPerformed(evt);
            }
        });

        jLabel9.setText("Orientation: Horizontal");

        cbHorizontal.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Left", "Centre", "Right" }));
        cbHorizontal.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbHorizontalActionPerformed(evt);
            }
        });

        jLabel10.setText("Vertical");

        cbVertical.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Top", "Middle", "Baseline" }));
        cbVertical.setSelectedIndex(2);
        cbVertical.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbVerticalActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlTextOptionsLayout = new javax.swing.GroupLayout(pnlTextOptions);
        pnlTextOptions.setLayout(pnlTextOptionsLayout);
        pnlTextOptionsLayout.setHorizontalGroup(
            pnlTextOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlTextOptionsLayout.createSequentialGroup()
                .addComponent(jLabel8)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spnFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbRotate)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel9)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbHorizontal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel10)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbVertical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlTextOptionsLayout.setVerticalGroup(
            pnlTextOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(cbHorizontal)
            .addGroup(pnlTextOptionsLayout.createSequentialGroup()
                .addGroup(pnlTextOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(pnlTextOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(spnFontSize, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jLabel8))
                    .addComponent(cbRotate)
                    .addGroup(pnlTextOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jLabel9)
                        .addComponent(jLabel10)
                        .addComponent(cbVertical, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        tbDrawingOptions.add(pnlTextOptions);

        btnShrinkTextOptions.setText("Shrink");
        btnShrinkTextOptions.setFocusable(false);
        btnShrinkTextOptions.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShrinkTextOptions.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShrinkTextOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShrinkTextOptionsActionPerformed(evt);
            }
        });
        tbDrawingOptions.add(btnShrinkTextOptions);
        tbDrawingOptions.add(jSeparator2);

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 11)); // NOI18N
        jLabel11.setText("Security Options: ");
        tbDrawingOptions.add(jLabel11);

        btnGrpSecurityType.add(rbDetection);
        rbDetection.setText("Detection");
        rbDetection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbDetectionActionPerformed(evt);
            }
        });

        btnGrpSecurityType.add(rbLocks);
        rbLocks.setText("Locks");
        rbLocks.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbLocksActionPerformed(evt);
            }
        });

        jLabel12.setText("Device");

        cbDevice.setModel(new javax.swing.DefaultComboBoxModel(new String[] { "Item 1", "Item 2", "Item 3", "Item 4" }));
        cbDevice.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cbDeviceActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout pnlSecurityOptionsLayout = new javax.swing.GroupLayout(pnlSecurityOptions);
        pnlSecurityOptions.setLayout(pnlSecurityOptionsLayout);
        pnlSecurityOptionsLayout.setHorizontalGroup(
            pnlSecurityOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlSecurityOptionsLayout.createSequentialGroup()
                .addComponent(rbDetection)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(rbLocks)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jLabel12)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(cbDevice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
        );
        pnlSecurityOptionsLayout.setVerticalGroup(
            pnlSecurityOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, pnlSecurityOptionsLayout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addGroup(pnlSecurityOptionsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbDetection)
                    .addComponent(rbLocks)
                    .addComponent(jLabel12)
                    .addComponent(cbDevice, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
        );

        tbDrawingOptions.add(pnlSecurityOptions);

        btnShrinkSecurityOptions.setText("Shrink");
        btnShrinkSecurityOptions.setFocusable(false);
        btnShrinkSecurityOptions.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnShrinkSecurityOptions.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnShrinkSecurityOptions.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnShrinkSecurityOptionsActionPerformed(evt);
            }
        });
        tbDrawingOptions.add(btnShrinkSecurityOptions);

        tbDrawingObjects.setOrientation(javax.swing.SwingConstants.VERTICAL);
        tbDrawingObjects.setRollover(true);

        btnAddLine.setText("Add Line");
        btnAddLine.setFocusable(false);
        btnAddLine.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddLine.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddLine.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLineActionPerformed(evt);
            }
        });
        tbDrawingObjects.add(btnAddLine);

        btnAddBox.setText("Add Box");
        btnAddBox.setFocusable(false);
        btnAddBox.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddBox.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddBoxActionPerformed(evt);
            }
        });
        tbDrawingObjects.add(btnAddBox);

        btnAddOval.setText("Add Oval");
        btnAddOval.setFocusable(false);
        btnAddOval.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddOval.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddOval.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddOvalActionPerformed(evt);
            }
        });
        tbDrawingObjects.add(btnAddOval);

        btnAddText.setText("Add Text");
        btnAddText.setFocusable(false);
        btnAddText.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddText.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddText.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddTextActionPerformed(evt);
            }
        });
        tbDrawingObjects.add(btnAddText);

        btnAddSecurity.setText("Add Security");
        btnAddSecurity.setFocusable(false);
        btnAddSecurity.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnAddSecurity.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnAddSecurity.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddSecurityActionPerformed(evt);
            }
        });
        tbDrawingObjects.add(btnAddSecurity);
        tbDrawingObjects.add(jSeparator5);

        btnEditObjects.setText("Edit Objects");
        btnEditObjects.setFocusable(false);
        btnEditObjects.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);
        btnEditObjects.setVerticalTextPosition(javax.swing.SwingConstants.BOTTOM);
        btnEditObjects.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnEditObjectsActionPerformed(evt);
            }
        });
        tbDrawingObjects.add(btnEditObjects);

        addComponentListener(new java.awt.event.ComponentAdapter() {
            public void componentMoved(java.awt.event.ComponentEvent evt) {
                formComponentMoved(evt);
            }
        });

        jLabel3.setText("Height");

        btnSave.setText("Save");
        btnSave.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnSaveActionPerformed(evt);
            }
        });

        btnUpdateSize.setText("Update Size");
        btnUpdateSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnUpdateSizeActionPerformed(evt);
            }
        });

        btnResetSize.setText("Reset Size");
        btnResetSize.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnResetSizeActionPerformed(evt);
            }
        });

        jLabel4.setText("Box Size");

        jLabel1.setText("Name");

        txtName.setColumns(25);

        jLabel2.setText("Width");

        javax.swing.GroupLayout pnlMainLayout = new javax.swing.GroupLayout(pnlMain);
        pnlMain.setLayout(pnlMainLayout);
        pnlMainLayout.setHorizontalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(spImageHolder)
                    .addGroup(pnlMainLayout.createSequentialGroup()
                        .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(pnlMainLayout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnWidth, javax.swing.GroupLayout.PREFERRED_SIZE, 58, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel3)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnHeight, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(jLabel4)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(spnBoxSize, javax.swing.GroupLayout.PREFERRED_SIZE, 56, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnUpdateSize)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnResetSize))
                            .addComponent(btnSave))
                        .addGap(0, 31, Short.MAX_VALUE)))
                .addContainerGap())
        );
        pnlMainLayout.setVerticalGroup(
            pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(pnlMainLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(pnlMainLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(txtName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2)
                    .addComponent(spnWidth, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel3)
                    .addComponent(spnHeight, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnUpdateSize)
                    .addComponent(btnResetSize)
                    .addComponent(jLabel4)
                    .addComponent(spnBoxSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(spImageHolder, javax.swing.GroupLayout.DEFAULT_SIZE, 460, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(btnSave)
                .addContainerGap())
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(pnlMain, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    private void btnSaveActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnSaveActionPerformed
        map.name = txtName.getText();
        map.width = (Integer)spnWidth.getValue();
        map.height = (Integer)spnHeight.getValue();
        map.boxSize = (Integer)spnBoxSize.getValue();
        fireRunChangeEvent(new RunChangeEvent(map, RunChangeEvent.NO_ADD_REMOVE));
    }//GEN-LAST:event_btnSaveActionPerformed

    private void btnResetSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnResetSizeActionPerformed
        spnWidth.setValue(map.width);
        spnHeight.setValue(map.height);
        spnBoxSize.setValue(map.boxSize);
    }//GEN-LAST:event_btnResetSizeActionPerformed

    private void btnUpdateSizeActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnUpdateSizeActionPerformed
        map.width = (Integer)spnWidth.getValue();
        map.height = (Integer)spnHeight.getValue();
        map.boxSize = (Integer)spnBoxSize.getValue();
        mdp.resize();
    }//GEN-LAST:event_btnUpdateSizeActionPerformed

    private void formComponentMoved(java.awt.event.ComponentEvent evt) {//GEN-FIRST:event_formComponentMoved
        if(firstMove) {
            BasicToolBarUI ui1 = (BasicToolBarUI)tbDrawingOptions.getUI();
            boolean isFloating = Preferences.getBooleanPreference("MapOptionsToolbarFloat", false);
            if(isFloating) {
                Point p = Preferences.getPointPreference("MapOptionsToolbarLocation");
                ui1.setFloatingLocation(p.x, p.y-25);
                ui1.setFloating(true, null);
            }
            ui1 = (BasicToolBarUI)tbDrawingObjects.getUI();
            isFloating = Preferences.getBooleanPreference("MapObjectsToolbarFloat", false);
            if(isFloating) {
                Point p = Preferences.getPointPreference("MapObjectsToolbarLocation");
                ui1.setFloatingLocation(p.x, p.y-25);
                ui1.setFloating(true, null);
            }
            firstMove = false;
        }
    }//GEN-LAST:event_formComponentMoved

    private void btnEditColoursActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditColoursActionPerformed
        mdp.cancelPlace();
        EditNamedColoursDialog encd = new EditNamedColoursDialog(null, map);
        encd.addMapChangeListener(new MapChangeListener() {
            @Override
            public void mapChanged(MapChangeEvent evt) {
                myMapChanged();
            }
        });
        encd.showDialog();
        mdp.repaint();
    }//GEN-LAST:event_btnEditColoursActionPerformed

    private void btnAddLineActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLineActionPerformed
        if(btnAddLine.isSelected()) {
            if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
                mdp.cancelPlace();
                btnAddLine.setSelected(true);
            }
            mdp.startLinePlace((NamedColour)cbColour.getSelectedItem(), ((LineWidthComboBoxModel)cbLineWidth.getModel()).getValue());
        } else {
            mdp.cancelPlace();
        }
    }//GEN-LAST:event_btnAddLineActionPerformed

    private void cbColourActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbColourActionPerformed
        if(cbColour.getSelectedItem() == NamedColourComboBoxModel.newColour) {
            Color colour = JColorChooser.showDialog(this, "New Colour", Color.white);
            if(colour != null) {
                String name = JOptionPane.showInputDialog(this, "Name your colour", "New Colour", JOptionPane.QUESTION_MESSAGE);
                if(name != null) {
                    NamedColour newColour = new NamedColour(name, colour);
                    ((NamedColourComboBoxModel)cbColour.getModel()).add(newColour);
                    cbColour.setSelectedItem(newColour);
                }
            }
        }
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            mdp.updateColour((NamedColour)cbColour.getSelectedItem());
        }
    }//GEN-LAST:event_cbColourActionPerformed

    private void cbFilledActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbFilledActionPerformed
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            mdp.updateFilled(cbFilled.isSelected());
        }
    }//GEN-LAST:event_cbFilledActionPerformed

    private void btnAddTextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddTextActionPerformed
        if(btnAddText.isSelected()) {
            if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
                mdp.cancelPlace();
                btnAddText.setSelected(true);
            }
            mdp.startTextPlace((NamedColour)cbColour.getSelectedItem(), (Integer)spnFontSize.getValue(), cbHorizontal.getSelectedIndex(), cbVertical.getSelectedIndex(), cbRotate.isSelected());
        } else {
            mdp.cancelPlace();
        }
    }//GEN-LAST:event_btnAddTextActionPerformed

    private void btnAddOvalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddOvalActionPerformed
        if(btnAddOval.isSelected()) {
            if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
                mdp.cancelPlace();
                btnAddOval.setSelected(true);
            }
            mdp.startOvalPlace((NamedColour)cbColour.getSelectedItem(), ((LineWidthComboBoxModel)cbLineWidth.getModel()).getValue(), cbFilled.isSelected());
        } else {
            mdp.cancelPlace();
        }
    }//GEN-LAST:event_btnAddOvalActionPerformed

    private void cbRotateActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbRotateActionPerformed
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            mdp.updateRotate(cbRotate.isSelected());
        }
    }//GEN-LAST:event_cbRotateActionPerformed

    private void cbHorizontalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbHorizontalActionPerformed
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            mdp.updateOrientation(0, cbHorizontal.getSelectedIndex());
        }
    }//GEN-LAST:event_cbHorizontalActionPerformed

    private void cbVerticalActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbVerticalActionPerformed
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            mdp.updateOrientation(1, cbVertical.getSelectedIndex());
        }
    }//GEN-LAST:event_cbVerticalActionPerformed

    private void btnShrinkTextOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShrinkTextOptionsActionPerformed
        if(pnlTextOptions.isVisible()) {
            pnlTextOptions.setVisible(false);
            btnShrinkTextOptions.setText("Expand");
        } else {
            pnlTextOptions.setVisible(true);
            btnShrinkTextOptions.setText("Shrink");
        }
    }//GEN-LAST:event_btnShrinkTextOptionsActionPerformed

    private void btnAddBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddBoxActionPerformed
        if(btnAddBox.isSelected()) {
            if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
                mdp.cancelPlace();
                btnAddBox.setSelected(true);
            }
            mdp.startBoxPlace((NamedColour)cbColour.getSelectedItem(), ((LineWidthComboBoxModel)cbLineWidth.getModel()).getValue(), cbFilled.isSelected());
        } else {
            mdp.cancelPlace();
        }
    }//GEN-LAST:event_btnAddBoxActionPerformed

    private void btnAddSecurityActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddSecurityActionPerformed
        if(btnAddSecurity.isSelected()) {
            if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
                mdp.cancelPlace();
                btnAddSecurity.setSelected(true);
            }
            int type;
            if(rbDetection.isSelected()) {
                type = MapSecurity.DETECTION;
            } else {
                type = MapSecurity.LOCK;
            }
            mdp.startSecurityPlace(type, (String)cbDevice.getSelectedItem(), (NamedColour)cbColour.getSelectedItem(), ((LineWidthComboBoxModel)cbLineWidth.getModel()).getValue());
        } else {
            mdp.cancelPlace();
        }
    }//GEN-LAST:event_btnAddSecurityActionPerformed

    private void btnShrinkSecurityOptionsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnShrinkSecurityOptionsActionPerformed
        if(pnlSecurityOptions.isVisible()) {
            pnlSecurityOptions.setVisible(false);
            btnShrinkSecurityOptions.setText("Expand");
        } else {
            pnlSecurityOptions.setVisible(true);
            btnShrinkSecurityOptions.setText("Shrink");
        }
    }//GEN-LAST:event_btnShrinkSecurityOptionsActionPerformed

    private void rbDetectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbDetectionActionPerformed
        cbDevice.setModel(new DefaultComboBoxModel(MapSecurity.detectionList));
        cbDevice.setSelectedIndex(0);
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            int type;
            if(rbDetection.isSelected()) {
                type = MapSecurity.DETECTION;
            } else {
                type = MapSecurity.LOCK;
            }
            mdp.updateDevice(type, (String)cbDevice.getSelectedItem());
        }
    }//GEN-LAST:event_rbDetectionActionPerformed

    private void rbLocksActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbLocksActionPerformed
        cbDevice.setModel(new DefaultComboBoxModel(MapSecurity.locksList));
        cbDevice.setSelectedIndex(0);
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            int type;
            if(rbDetection.isSelected()) {
                type = MapSecurity.DETECTION;
            } else {
                type = MapSecurity.LOCK;
            }
            mdp.updateDevice(type, (String)cbDevice.getSelectedItem());
        }
    }//GEN-LAST:event_rbLocksActionPerformed

    private void cbDeviceActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cbDeviceActionPerformed
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            int type;
            if(rbDetection.isSelected()) {
                type = MapSecurity.DETECTION;
            } else {
                type = MapSecurity.LOCK;
            }
            mdp.updateDevice(type, (String)cbDevice.getSelectedItem());
        }
    }//GEN-LAST:event_cbDeviceActionPerformed

    private void btnEditObjectsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnEditObjectsActionPerformed
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            mdp.cancelPlace();
        }
        MapObjectsDialog dialog = new MapObjectsDialog(null, map);
        dialog.setMapChangeListener(new MapChangeListener() {
            @Override
            public void mapChanged(MapChangeEvent evt) {
                myMapChanged();
            }
        });
        dialog.showDialog();
    }//GEN-LAST:event_btnEditObjectsActionPerformed


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JToggleButton btnAddBox;
    private javax.swing.JToggleButton btnAddLine;
    private javax.swing.JToggleButton btnAddOval;
    private javax.swing.JToggleButton btnAddSecurity;
    private javax.swing.JToggleButton btnAddText;
    private javax.swing.JButton btnEditColours;
    private javax.swing.JButton btnEditObjects;
    private javax.swing.ButtonGroup btnGrpSecurityType;
    private javax.swing.JButton btnResetSize;
    private javax.swing.JButton btnSave;
    private javax.swing.JButton btnShrinkSecurityOptions;
    private javax.swing.JButton btnShrinkTextOptions;
    private javax.swing.JButton btnUpdateSize;
    private javax.swing.JComboBox cbColour;
    private javax.swing.JComboBox cbDevice;
    private javax.swing.JCheckBox cbFilled;
    private javax.swing.JComboBox cbHorizontal;
    private javax.swing.JComboBox cbLineWidth;
    private javax.swing.JCheckBox cbRotate;
    private javax.swing.JComboBox cbVertical;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JToolBar.Separator jSeparator1;
    private javax.swing.JToolBar.Separator jSeparator2;
    private javax.swing.JToolBar.Separator jSeparator3;
    private javax.swing.JToolBar.Separator jSeparator5;
    private javax.swing.JToolBar.Separator jSeparator7;
    private javax.swing.JPanel pnlMain;
    private javax.swing.JPanel pnlSecurityOptions;
    private javax.swing.JPanel pnlTextOptions;
    private javax.swing.JRadioButton rbDetection;
    private javax.swing.JRadioButton rbLocks;
    private javax.swing.JScrollPane spImageHolder;
    private javax.swing.JSpinner spnBoxSize;
    private javax.swing.JSpinner spnFontSize;
    private javax.swing.JSpinner spnHeight;
    private javax.swing.JSpinner spnWidth;
    private javax.swing.JToolBar tbDrawingObjects;
    private javax.swing.JToolBar tbDrawingOptions;
    private javax.swing.JTextField txtName;
    // End of variables declaration//GEN-END:variables

    @Override
    public void fireRunChangeEvent(RunChangeEvent evt) {
        RunChangeListener[] listeners = listenerList.getListeners(RunChangeListener.class);
        for(RunChangeListener listener : listeners) {
            listener.onRunChanged(evt);
        }
    }

    @Override
    public String getTitleBar() {
        return "Map: " +map.name;
    }

    @Override
    public void clickSaveButton() {
        btnSave.doClick();
    }

    @Override
    public void preferenceSave() {
        Preferences.setPreference("MapOptionsToolbarOrientation", tbDrawingOptions.getOrientation());
        BasicToolBarUI ui1 = (BasicToolBarUI)tbDrawingOptions.getUI();
        Preferences.setPreference("MapOptionsToolbarFloat", ui1.isFloating());
        if(ui1.isFloating()) {
            Preferences.setPreference("MapOptionsToolbarLocation", tbDrawingOptions.getLocationOnScreen());
            ui1.setFloating(false, null);
        }
        Preferences.setPreference("MapOptionsToolbarConstraints", ((BorderLayout)this.getLayout()).getConstraints(tbDrawingOptions));
        
        Preferences.setPreference("MapObjectsToolbarOrientation", tbDrawingObjects.getOrientation());
        ui1 = (BasicToolBarUI)tbDrawingObjects.getUI();
        Preferences.setPreference("MapObjectsToolbarFloat", ui1.isFloating());
        if(ui1.isFloating()) {
            Preferences.setPreference("MapObjectsToolbarLocation", tbDrawingObjects.getLocationOnScreen());
            ui1.setFloating(false, null);
        }
        Preferences.setPreference("MapObjectsToolbarConstraints", ((BorderLayout)this.getLayout()).getConstraints(tbDrawingObjects));
        
        Preferences.setPreference("MapObjectsToolbarTextOptionsVisible", pnlTextOptions.isVisible());
        Preferences.setPreference("MapObjectsToolbarSecurityOptionsVisible", pnlSecurityOptions.isVisible());
    }

    private void cbLineWidthItemSelected() {
        LineWidthComboBoxModel model = (LineWidthComboBoxModel)cbLineWidth.getModel();
        if(model.isCustomSelected()) {
            NumberSelectorDialog nsd = new NumberSelectorDialog(null, "Custom Line Width..", model.getValue(), false);
            if(nsd.showDialog() == NumberSelectorDialog.OK) {
                model.setValue(nsd.getNumber());
            }
        }
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            mdp.updateLineWidth(model.getValue());
        }
    }

    private void mdpDrawingModeChanged(int newMode) {
        switch(newMode & MapDrawingPanel.MODE_MASK) {
            case MapDrawingPanel.NORMAL_MODE:
                btnAddLine.setSelected(false);
                btnAddBox.setSelected(false);
                btnAddText.setSelected(false);
                btnAddOval.setSelected(false);
                btnAddSecurity.setSelected(false);
                break;
        }
    }

    private void myMapChanged() {
        mdp.repaint();
    }
    
    private void spnFontSizeStateChanged(ChangeEvent e) {
        if(mdp.getMode() != MapDrawingPanel.NORMAL_MODE) {
            mdp.updateFontSize((Integer)spnFontSize.getValue());
        }
    }
}
